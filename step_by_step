Create a new rails app:
	skipping test unit and using Postgress DB in the installation:
	rails new fit_right --skip-test-unit -d postgresql
	should see rails create a bunch of files & directories for you and then bundle install for you too. 

Start repo:
	Initialize a repository on your machine:  
		git init
		git add .
		git commit -m "first commit"
	Create a remote repo on github and sync them:
		Go create the repo on github
		git remote add origin https://github.com/kennytrionfo/taste_buds.git
		git push -u origin master

Start documentation: 
	Open app in text editor, 
	Edit readme file if u like, 
	Start step by step instructions file if you like. 

System check: 
	Check ur Rubies, versions and gems etc. i.e. rvm, ruby, rails, bundle, gems etc. 
	rvm list
	rvm gemset
	ruby -v
	rails -v

Install gems: 
	In Gemfile:
	Better Errors, factory girl, sprockets? 

	Better Errors Gem:
	group :development, :test do
		gem 'binding_of_caller', '~> 0.7.2'
		gem 'better_errors', '~> 2.0.0'
	end

	Minitest: 
	group :test, :development do
  	gem "minitest-rails"
	end
	Check for the minitest generator in console with: 
	rails generate
	Install the gem with this from the console:
	rails g minitest:install
	Should see a test folder now in ur app in text editor. 

	gem 'minitest-focus' #allows you to focus on just one test by putting 'focus' before test
	gem 'minitest-reporters'  #give you prettier output 
	The above two must be required in ur test_helper.rb file. 

** PUt TESTING IN HERE ALONG THE WAY ON 2ND RUN OF BUILDING THIS APP

** ALSO BUILD INTO THIS DOING IT IN MOBILE 2ND TIME AROUND. 

** ALSO DO THIS WITHOUT USING SCAFFOLDS NEXT TIME TOO. 

Create the ability to add shops model with it's attributes:
	rails g scaffold Shop title:string description:text flavor:string address:string rating:string
	rake db:migrate
	localhost:3000
	to test it in browser

Add the ability to add users: 
	Install and set up devise gem
	bundle install
	Following instructions on devise homepage and in console: 
	rails generate devise:install
	In config/development: 
	config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
    In config routes: 
    root 'shops#index'
    Add code to allow flash messages in application.html.erb:
    (not copying the instructions in the console here but putting code that works with bootstrap), above <%= yield %>:
    <% flash.each do |name, msg| %>
		<%= content_tag(:div, msg, class: "alert alert-info") %>
	<% end %>
	rails g devise:views
	Generate a devise model by: 
	rails g devise User
	rake db:migrate
	Stop and restart server in the console with:
	control c, then: 
	rails s
	Test in browser with: 
	localhost:3000/users/sign_in

Connect any new shops with a user: 
	rails g migration add_user_id_to_shops user_id:integer	
	Make this change in our models/tables active in the db:
	rake db:migrate

Connect the User model and Shop models with associations: 
	In models/shop.rb
	belongs_to :user
	In models/user.rb

Make it so when a new shop is created it's done from the current user: 
	In ShopsController, in new action, make @shop = 
	current_user.movies.build
	And also put this in the create action before (shop_params)
	Also authenticate users. 
	At top: 
	before_action :authenticate_user!, except: [:index, :show]
	(This is from devise, makes it so that a user that isn't signed in will be directed to the signup page if they try and create a new shop.)

Add the ability to upload an image for each shop: 
	Put paperclip gem in Gemfile:
	gem 'paperclip', '~> 4.2.1'
	bundle install
	restart server with: 
	controll c and then rails s
	Read instructions in paperclip github homepage and under put instructions under rails 4 into shop.rb model but with a few syntax and other changes like so: 
	has_attached_file :image, :styles: { medium: "400x600#", }
  	validates_attachment_content_type :image, content_type: /\Aimage\/.*\Z/
  	Following github directions still, do a migration: 
  	rails g paperclip shop image
  	rake db:migrate
  	Next edit forms and display it inside of view. Following instructions under "Edit and New Viewe". In views/shops/_form.html.erb: 
  	Add
  	:html => { :multipart => true }
  	to form_for line (as well as hash syntax) so it'll look like: 
	<%= form_for @shop, html: { multipart: true } do |f| %>
  	Add a file field to the form so we can upload a file: 
  	Under the rating field: 
	  </div>
	    <div class="field">
	    <%= f.label :image %><br>
	    <%= f.file_field :image %>
	  </div>














	